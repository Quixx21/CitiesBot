from aiogram import F, Router, types

from keyboards.keyboards import game_menu, main_menu, search_menu
from settings.logger import *
from services.city_api import city_exists
from services.game_manager import (
    create_game,
    games,
    get_opponent,
    get_state,
    reset_state,
    set_state,
)
from services.stats_manager import update_stats

router = Router()
waiting_player = None


async def start_timer(game_id, player_id, bot):
    await asyncio.sleep(60)
    if game_id in games and games[game_id]["turn"] == player_id:
        state = games[game_id]
        opponent = get_opponent(game_id, player_id)
        await bot.send_message(player_id, "‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª.")
        await bot.send_message(opponent, "üèÜ –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, —Ç—ã –ø–æ–±–µ–¥–∏–ª!")
        cities_count_player = len(state["used"])
        update_stats(player_id, "loss", cities_count_player)
        update_stats(opponent, "win", cities_count_player)
        reset_state(player_id)
        reset_state(opponent)
        del games[game_id]


@router.message(F.text == "üéÆ –ò–≥—Ä–∞—Ç—å –≤ –≥–æ—Ä–æ–¥–∞")
async def find_player(message: types.Message):
    global waiting_player
    user_id = message.from_user.id
    logger.info(f"User {user_id} clicked 'Play'")
    if get_state(user_id) == "search":
        await message.answer("‚è≥ –¢—ã —É–∂–µ –∏—â–µ—à—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")
        return
    if get_state(user_id) == "game":
        await message.answer("üéÆ –¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
        return

    if waiting_player is None:
        waiting_player = user_id
        set_state(user_id, "search")
        await message.answer("üîé –ò—â—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...", reply_markup=search_menu)

    else:
        opponent = waiting_player
        waiting_player = None
        game_id = create_game(user_id, opponent)

        set_state(user_id, "game")
        set_state(opponent, "game")

        await message.answer(
            "üéÆ –ù–∞—à—ë–ª—Å—è —Å–æ–ø–µ—Ä–Ω–∏–∫! –¢—ã —Ö–æ–¥–∏—à—å –ø–µ—Ä–≤—ã–º.", reply_markup=game_menu
        )
        await message.bot.send_message(
            opponent, "üéÆ –ù–∞—à—ë–ª—Å—è —Å–æ–ø–µ—Ä–Ω–∏–∫! –ñ–¥–∏ —Ö–æ–¥–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞.", reply_markup=game_menu
        )

        games[game_id]["timer"] = asyncio.create_task(
            start_timer(game_id, user_id, message.bot)
        )


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞")
async def cancel_search(message: types.Message):
    global waiting_player
    user_id = message.from_user.id

    if get_state(user_id) != "search":
        await message.answer("‚ùå –¢—ã —Å–µ–π—á–∞—Å –Ω–µ –∏—â–µ—à—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.", reply_markup=main_menu)
        return

    if waiting_player == user_id:
        waiting_player = None

    reset_state(user_id)
    await message.answer("‚Ü©Ô∏è –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)


@router.message(F.text == "üè≥Ô∏è –°–¥–∞—Ç—å—Å—è")
async def surrender(message: types.Message):
    user_id = message.from_user.id
    game_id = None

    for gid, state in games.items():
        if user_id in state["players"]:
            game_id = gid
            break

    if not game_id:
        await message.answer("‚ùå –¢—ã –Ω–µ –≤ –∏–≥—Ä–µ.", reply_markup=main_menu)
        return

    state = games[game_id]
    opponent = get_opponent(game_id, user_id)

    await message.answer("üè≥Ô∏è –¢—ã —Å–¥–∞–ª—Å—è. –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.", reply_markup=main_menu)
    await message.bot.send_message(
        opponent, "üèÜ –°–æ–ø–µ—Ä–Ω–∏–∫ —Å–¥–∞–ª—Å—è. –ü–æ–±–µ–¥–∞ –∑–∞ —Ç–æ–±–æ–π!", reply_markup=main_menu
    )

    cities_count = len(state["used"])
    update_stats(user_id, "loss", cities_count)
    update_stats(opponent, "win", cities_count)

    reset_state(user_id)
    reset_state(opponent)
    del games[game_id]


@router.message(F.text.regexp(r"^[–ê-–Ø–∞-—è–Å—ëA-Za-z\- ]+$"))
async def handle_city(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    logger.info(f"User {user_id} tried city: {text}")
    # find a player
    game_id = None
    for gid, state in games.items():
        if user_id in state["players"]:
            game_id = gid
            break

    if not game_id:
        return

    state = games[game_id]

    if state["turn"] != user_id:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥!")
        return

    city = city_exists(text)
    if not city:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ!")
        return
    if text.lower() in state["used"]:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!")
        return
    if state["last_letter"] and not text.lower().startswith(state["last_letter"]):
        await message.answer(
            f"‚ùå –ù—É–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É {state['last_letter'].upper()}"
        )
        return
    state["used"].add(text.lower())
    opponent = get_opponent(game_id, user_id)
    last_letter = text[-1].lower()
    while last_letter in ["—å", "—ä", "—ã", "–π"]:
        last_letter = text[-2].lower()
    state["last_letter"] = last_letter
    state["turn"] = opponent
    if state["timer"]:
        state["timer"].cancel()
    await message.answer(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {text}. –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω —Å–æ–ø–µ—Ä–Ω–∏–∫—É!")
    await message.bot.send_message(
        opponent,
        f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–∑–≤–∞–ª {text}. –¢–≤–æ–π —Ö–æ–¥! –ù–∞–∑–æ–≤–∏ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É {last_letter.upper()}",
    )
    state["timer"] = asyncio.create_task(start_timer(game_id, opponent, message.bot))
